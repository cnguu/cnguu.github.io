(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{503:function(e,t,i){"use strict";i.r(t);var s=i(499),a=i(498);a.a.enableBoundaryChecking(!1);const n=(e,t,i)=>"+"===i?a.a.plus(e,t):"-"===i?a.a.minus(e,t):"*"===i?a.a.times(e,t):"/"===i?a.a.divide(e,t):0;var r={data:()=>({canvasWidth:0,canvasHeight:0,canvasAspect:1}),methods:{getTexture(e){return new Promise((t,i)=>{this.textureLoader.load(e,e=>{t(e)},()=>{},e=>{i(e)})})},handleCanvasSize(){this.canvasWidth=this.$refs.containerRef.offsetWidth;const e=this.texture.image.width,t=this.texture.image.height;this.canvasWidth>=e?this.canvasHeight=t:this.canvasHeight=n(n(this.canvasWidth,t,"*"),e,"/"),this.canvasAspect=n(this.canvasWidth,this.canvasHeight,"/")},updateRenderer(){this.renderer.setSize(this.canvasWidth,this.canvasHeight),this.renderer.setPixelRatio(window.devicePixelRatio||1),this.renderer.render(this.scene,this.camera)},updateCamera(){this.camera.aspect=this.canvasAspect,this.camera.updateProjectionMatrix()},updateScene(){this.updateRenderer(),this.updateCamera()},onResize(){this.handleCanvasSize(),this.updateScene()},modelAnimate(){this.material.uniforms.uMouse.value=this.pointer,this.reqId=requestAnimationFrame(this.modelAnimate),this.updateRenderer()},onMouseMove(e){this.pointer.x=e.clientX/this.canvasWidth*2-1,this.pointer.y=-e.clientY/this.canvasHeight*2+1}},async mounted(){this.textureLoader=new s.f,this.texture=await this.getTexture("https://cdn.jsdelivr.net/gh/cnguu/pic@master/20230610/QanfgU73GocvlpY8.jpg"),this.depthTexture=await this.getTexture("https://cdn.jsdelivr.net/gh/cnguu/pic@master/20230610/yUwLqS4cH2b7VseY.jpg"),this.handleCanvasSize(),this.scene=new s.d,this.camera=new s.b(45,this.canvasAspect,1,100),this.camera.position.set(0,0,9.5),this.renderer=new s.h({canvas:this.$refs.canvasRef,antialias:!0}),this.pointer=new s.g,this.material=new s.e({uniforms:{uTexture:{value:this.texture},uDepthTexture:{value:this.depthTexture},uMouse:{value:this.pointer}},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform sampler2D uTexture;\n        uniform sampler2D uDepthTexture;\n        uniform vec2 uMouse;\n        varying vec2 vUv;\n        void main() {\n          vec4 color = texture2D(uTexture, vUv);\n          vec4 depth = texture2D(uDepthTexture, vUv);\n          float depthValue = depth.r;\n          float x = vUv.x + uMouse.x * 0.01 * depthValue;\n          float y = vUv.y + uMouse.y * 0.01 * depthValue;\n          vec4 newColor = texture2D(uTexture, vec2(x, y));\n          gl_FragColor = newColor;\n        }\n      "}),this.geometry=new s.c(n(this.canvasWidth,100,"/"),n(this.canvasHeight,100,"/")),this.plane=new s.a(this.geometry,this.material),this.scene.add(this.plane),this.updateScene(),window.addEventListener("resize",this.onResize,!1),this.modelAnimate()},beforeDestroy(){window.removeEventListener("resize",this.onResize,!1),cancelAnimationFrame(this.reqId),this.plane.geometry.dispose(),this.plane.material.dispose(),this.scene.remove(this.plane),this.scene.clear(),this.renderer.dispose()}},h=i(37),o=Object(h.a)(r,(function(){var e=this.$createElement,t=this._self._c||e;return t("div",{ref:"containerRef"},[t("canvas",{ref:"canvasRef",style:{width:this.canvasWidth+"px",height:this.canvasHeight+"px"},on:{mousemove:this.onMouseMove}})])}),[],!1,null,null,null);t.default=o.exports}}]);